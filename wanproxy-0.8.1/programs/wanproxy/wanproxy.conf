# Set log-mask before doing anything else so that there isn't a lot of noise.
# Uses an informative mask in non-release builds.  Errors-only in release builds.
create log-mask catch-all
set catch-all.regex "^/"
set catch-all.mask ERROR
activate catch-all

# Set up codec instances.
create codec codec0
set codec0.codec XCodec
set codec0.compressor zlib
set codec0.compressor_level 6
activate codec0

create codec codec1
set codec1.codec XCodec
set codec1.compressor zlib
set codec1.compressor_level 6
activate codec1

# Set up interfaces.
create interface if0
set if0.family IP
set if0.host "localhost"
set if0.port "3300"
activate if0

create interface if1
set if1.family $if0.family
set if1.host $if0.host
set if1.port "3301"
activate if1

create interface if2
set if2.family $if0.family
set if2.host $if0.host
set if2.port "3302"
activate if2

# And peers to connect to them.
create peer peer0
set peer0.family $if1.family
set peer0.host $if1.host
set peer0.port $if1.port
activate peer0

create peer peer1
set peer1.family $if2.family
set peer1.host $if2.host
set peer1.port $if2.port
activate peer1

# Set up proxy from the client that encodes.
create proxy proxy0
set proxy0.type TCP-TCP
set proxy0.interface if0
set proxy0.interface_codec None
set proxy0.peer peer0
set proxy0.peer_codec codec0
activate proxy0

# Which feeds into this, which decodes.
create proxy proxy1
set proxy1.type TCP-TCP
set proxy1.interface if1
set proxy1.interface_codec codec1
set proxy1.peer peer1
set proxy1.peer_codec None
activate proxy1

# Which feeds into this, which spawns connections from SOCKS.
create proxy-socks proxy-socks0
set proxy-socks0.interface if2
activate proxy-socks0

# And set up a monitoring interface on port 9900.
create interface if3
set if3.family $if0.family
set if3.host $if0.host
set if3.port "9900"
activate if3

create monitor monitor0
set monitor0.interface if3
activate monitor0
